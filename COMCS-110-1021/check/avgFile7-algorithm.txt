Name and ID: kunming zhu

Course and section: COMSC-110-8215

1. 
Objective: find maximum score, minimum score, average score, and number of scores greater than average of all the scores from input file


2. Requirements:

INPUT:
 
-fileName
-
each score from the input file



PROCESSING:

1. data

2. introduction

3. get input filename from user

4. determine how many scores are in the input file for storing the values

5. input values from input file

6. calculate the average score

7. find highest score

8. find lowest score

9. find how many scores are greater than the average score



OUTPUT: 

-objective

-author

-prompt the user for input file name

-if count = 0 then output error message "Sorry, ", fileName, " is empty."

-label "The scores from the file ", fileName, " are: "

-each score from the input file
-label "The average of ", count, " scores is: "

-averageScore

-label "The highest score is: "

-maxScore

-label "The lowest score is: "

-minScore
-label "The number of scores greater than the average is: "

-nGreater



DATA:

-fileName (text) = input file name

-line (text) = a line from the input file

-averageScore (decimal) = calculated average of all the scores from the input file

-count (integer) = number of scores in the input file

-totalScores (integer) = sum of all the scores in the input file

-maxScore (integer) = highest score of all the scores in the input file

-minScore (integer) = lowest score of all the scores in the input file

-nGreater (integer) = number of scores greater than the average score

-i (integer) = indice for traversing each element in the array

-scores (dynamic array) = holds all the scores read from the input file, each score is betwen 0-100




3. Algorithm instructions (each instruction has its own unique label for reference in use with test cases)

10 output objective

20 output author
***get the input file name from the user ***

30 output prompt "What is the input file name? "

40 input fileName
***determine how many scores are in the file***

45 count = 0

50 open fileName

55 if input file is not accessible, skip to instruction 999

57 if reached end of the file, skip to instruction 90

60 read a line from the input file

70 count = count + 1

80 skip to instruction 57
***create dynamic array***

90 close input file

95 if count = 0 then skip to instruction 990

100 create scores with 0-(count-1) elements for each score input from file
***input all the scores into the array***
105 i = 0

110 open input file

120 if reached end of file, skip to instruction xxx

130 input scores[i]

140 i= i+1

150 skip to instruction 120
***sum all the scores ***

160 i = 0

170 totalScores = 0

180 maxScore = scores[0]

190 minScore = scores[0]

200 if i >= count then skip to instruction 260

210 totalScores = totalScores + score[i]

220 if maxScore < scores[i] then maxScore =scores[i]

230 if minScore > scores[i] then minScore = scores[i]

240 i = i + 1

250 skip to instruction 200
***calculate average score***

260 averageScore = totalScores / count
***calculate the number of scores greater than the average ***

270 i =0

280 nGreater = 0

290 if i >= count then skip to instruction 310

300 if scores[i] > averageScore then nGreater = nGreater + 1
***output results***

310 output label "The scores from the file ", fileName, " are: "

320 i = 0 

330 if i >= count then skip to instruction 360

340 output scores[i], " "

350 skip to instruction 330

360 output label "The average of ", count, " scores is: ", averageScore

370 output label "The highest score is: ", maxScore

380 output label "The lowest score is: ", minScore

390 output label "The number of scores greater than the average is: ", nGreater

990 if count = 0 then output "Sorry the file is empty."

999 end



4. Test cases

Test case #1: input file has 3 scores in the file scores.txt

10 output objective

20 output author
***get the input file name from the user ***

30 output prompt "What is the input file name? "

40 fileName = scores.txt

50 open scores.txt

55 if input file is not accessible, skip to instruction 999

57 if reached end of the file, skip to instruction 90

60 read a line from the input file

70 count = count + 1=3

80 skip to instruction 57
***create dynamic array***

90 close input file

95 if count = 0 then skip to instruction 990 count=3

100 create scores with 0-(count-1) elements for each score input from file
***input all the scores into the array***

105 i = 0

110 open input file

120 if reached end of file, skip to instruction xxx

130 input scores[i] = 10

140 i= i+1 =1

130 input scores[i] = 20

140 i= i+1 =2

130 input scores[i] = 30

150 skip to instruction 
120
***sum all the scores ***

160 i = 0 =2

170 totalScores = 0 =60

180 maxScore = scores[0] =30

190 minScore = scores[0] =10

200 if i >= count then skip to instruction 260

210 totalScores = totalScores + score[i]

220 if maxScore < scores[i] then maxScore =scores[i]

230 if minScore > scores[i] then minScore = scores[i]

240 i = i + 1

250 skip to instruction 200
***calculate average score***

260 averageScore = totalScores / count =20
***calculate the number of scores greater than the average ***

270 i =0 =2

280 nGreater = 0 =2

290 if i >= count then skip to instruction 310

300 if scores[i] > averageScore then nGreater = nGreater + 1
***output results***

310 output label "The scores from the file ", fileName, " are: "

320 i = 0 

330 if i >= count then skip to instruction 360

340 output scores[i], "10 20 30 "

350 skip to instruction 330

360 output label "The average of ", count, " scores is: ", averageScore 20

370 output label "The highest score is: ", maxScore 30

380 output label "The lowest score is: ", minScore 10

390 output label "The number of scores greater than the average is: ", nGreater 2

990 if count = 0 then output "Sorry the file is empty."

999 end
... < you complete performing the algorithm for this test case



Test case #2: input file is empty

10 output objective

20 output author
***get the input file name from the user ***

30 output prompt "What is the input file name? "

40 fileName = scores.txt

50 open scores.txt

55 if input file is not accessible, skip to instruction 999

990 if count = 0 then output "Sorry the file is empty."

999 end



Test case #3: input file not there

10 output objective

20 output author
***get the input file name from the user ***

30 output prompt "What is the input file name? "

40 fileName = scores.txt

50 open scores.txt

55 if input file is not accessible, skip to instruction 999

999 end



Test case #4: only 1 score in the input file

10 output objective

20 output author
***get the input file name from the user ***

30 output prompt "What is the input file name? "

40 input fileName score.txt
***determine how many scores are in the file***

45 count = 1

50 open fileName score.txt

55 if input file is not accessible, skip to instruction 999

57 if reached end of the file, skip to instruction 90

60 read a line from the input file

70 count = count + 1

80 skip to instruction 
57
***create dynamic array***

90 close input file

95 if count = 0 then skip to instruction 990 1

100 create scores with 0-(count-1) elements for each score input from file
***input all the scores into the array***

105 i = 0

110 open input file

120 if reached end of file, skip to instruction xxx

130 input scores[i] 10

140 i= i+1

150 skip to instruction 120
***sum all the scores ***

160 i = 0

170 totalScores = 0  10

180 maxScore = scores[0] 10

190 minScore = scores[0] 10

200 if i >= count then skip to instruction 260

210 totalScores = totalScores + score[i] 10

220 if maxScore < scores[i] then maxScore =scores[i] 10

230 if minScore > scores[i] then minScore = scores[i] 10

240 i = i + 1

250 skip to instruction 200
***calculate average score***

260 averageScore = totalScores / count 10
***calculate the number of scores greater than the average ***

270 i =0

280 nGreater = 0 =0

290 if i >= count then skip to instruction 310

300 if scores[i] > averageScore then nGreater = nGreater + 1
***output results***

310 output label "The scores from the file ", fileName, " are: "

320 i = 0 

330 if i >= count then skip to instruction 360

340 output scores[i], "10 "

350 skip to instruction 330

360 output label "The average of ", count, " scores is: ", averageScore 10

370 output label "The highest score is: ", maxScore 10

380 output label "The lowest score is: ", minScore 10

390 output label "The number of scores greater than the average is: ", nGreater 0

990 if count = 0 then output "Sorry the file is empty."

999 end




****When translating this algorithm into a program for our COMSC-110-8215 course class exercise: ***
1. determine how many scores are in the input file
2. create a dynamically sized array for that many scores
3. use a void function to input the scores with an input parameter of 
the dynamically sized array
4. use a value returning function to calculate the average score
5. use a value returning function to calculate the number of scores 
greater than the average
6. use a value returning function to find the highest score
7. use a value returning function to find the lowest score